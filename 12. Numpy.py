import numpy as np
ls=list(range(1,13))
ls
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
ar=np.array(ls,dtype=float)
print(ar)
[ 1.  2.  3.  4.  5.  6.  7.  8.  9. 10. 11. 12.]
#ar.reshape(4,3)
ar.shape=(3,4)
print(ar.dtype)
print(ar.itemsize)
print(ar.size)
float64
8
12
print(ar)
ar[0,1]
[[ 1.  2.  3.  4.]
 [ 5.  6.  7.  8.]
 [ 9. 10. 11. 12.]]
2.0
ls
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
ar=np.array(ls)
print(ar)
ar=np.asarray(ls)
print(ar)
[ 1  2  3  4  5  6  7  8  9 10 11 12]
[ 1  2  3  4  5  6  7  8  9 10 11 12]
list(range(7))
list(range(1,7))
list(range(1,7,2))
[1, 3, 5]
np.arange(1,7,2)
array([1, 3, 5])
ls=[('rajeev',34),('satish',32)]
ar=np.array(ls)
ar
array([['rajeev', '34'],
       ['satish', '32']], dtype='<U6')
empdt=np.dtype([('name','S20'),('age','i4')])
ar=np.array(ls, dtype=empdt)
ar
array([(b'rajeev', 34), (b'satish', 32)],
      dtype=[('name', 'S20'), ('age', '<i4')])
ar.shape
(2,)
ar=np.arange(1,13)
print(ar.shape)
print(ar.ndim)
ar.shape=(4,3)
print(ar.shape)
print(ar.ndim)
(12,)
1
(4, 3)
2
ar=np.zeros(5)
ar=np.zeros((3,4))
ar=np.zeros((3,4,2)) #items/z, row, column
ar
array([[[0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.]],

       [[0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.]],

       [[0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.]]])
ar=np.ones(5)
ar=np.ones((3,4))
ar=np.ones((3,4,2)) #items/z, row, column
ar
array([[[1., 1.],
        [1., 1.],
        [1., 1.],
        [1., 1.]],

       [[1., 1.],
        [1., 1.],
        [1., 1.],
        [1., 1.]],

       [[1., 1.],
        [1., 1.],
        [1., 1.],
        [1., 1.]]])
ar=np.linspace(1,10,3) #equal distribution between range
ar=np.linspace(1,10,4, retstep=True)
print(ar)
ar=np.linspace(1,10,4, retstep=True, endpoint=False)
ar
(array([ 1.,  4.,  7., 10.]), 3.0)
(array([1.  , 3.25, 5.5 , 7.75]), 2.25)
ar1=np.arange(2,8)
ar1.shape=(3,2)
ar1
array([[2, 3],
       [4, 5],
       [6, 7]])
ar1+10 #scalar values
array([[12, 13],
       [14, 15],
       [16, 17]])
ar2=np.array([[10,20]])
ar2
array([[10, 20]])
print(ar1)
print("-------")
print(ar2)
print("-------")
ar1+ar2 #single rows with same number of elements in column
[[2 3]
 [4 5]
 [6 7]]
-------
[[10 20]]
-------
array([[12, 23],
       [14, 25],
       [16, 27]])
ar3=np.array([[20],[30],[40]])
ar3
array([[20],
       [30],
       [40]])
ar1+ar3 #single column with same number of rows.
array([[22, 23],
       [34, 35],
       [46, 47]])
ar4=np.array([[10,20],[30,40],[50,60]])
ar4
array([[10, 20],
       [30, 40],
       [50, 60]])
ar1+ar4 #broadcasting with same number of elements and dimensions
array([[12, 23],
       [34, 45],
       [56, 67]])
ar5=np.array([[10,20],[30,40]])
ar5
array([[10, 20],
       [30, 40]])
ar1+ar5 #errors
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
<ipython-input-79-a9a9f421138f> in <module>()
----> 1 ar1+ar5

ValueError: operands could not be broadcast together with shapes (3,2) (2,2) 
ar1
array([[2, 3],
       [4, 5],
       [6, 7]])
for r in range(len(ar1)):
    print("=>",ar1[r])
    for c in range(len(ar1[r])):
        print("==>", ar1[r,c])
        print(r,c)
        if (ar1[r,c]%2==0):
            ar1[r,c]=ar1[r,c]*10
    
ar1
=> [20  3]
==> 20
0 0
==> 3
0 1
=> [40  5]
==> 40
1 0
==> 5
1 1
=> [60  7]
==> 60
2 0
==> 7
2 1
array([[200,   3],
       [400,   5],
       [600,   7]])
ar1=np.arange(2,8)
ar1.shape=(3,2)
print(ar1)
print("----")
print(ar1[...,1])
print("----")
print(ar1[1,...])
[[2 3]
 [4 5]
 [6 7]]
----
[3 5 7]
----
[4 5]
for a in np.nditer(ar1, op_flags=['readwrite']):
    if a%2==0:
        print("even =>",a[...])
        a[...]=a[...]*10
    else:
        print("odd =>",a[...])
    
ar1
even => 2
odd => 3
even => 4
odd => 5
even => 6
odd => 7
array([[20,  3],
       [40,  5],
       [60,  7]])
ar1
array([[20,  3],
       [40,  5],
       [60,  7]])
print(np.mean(ar1)) #all
print(np.mean(ar1,1)) #rows
print(np.mean(ar1,0)) #columns
22.5
[11.5 22.5 33.5]
[40.  5.]
print(ar1)
print(np.amax(ar1)) #all
print(np.amax(ar1,1)) #rows
print(np.amax(ar1,0)) #columns
[[20  3]
 [40  5]
 [60  7]]
60
[20 40 60]
[60  7]
print(ar1)
print(np.ptp(ar1)) #all
print(np.ptp(ar1,1)) #rows
print(np.ptp(ar1,0)) #columns
[[20  3]
 [40  5]
 [60  7]]
57
[17 35 53]
[40  4]
np.std(ar1)
20.99801577927464
ar=np.arange(1,11)
print(ar)
print(np.percentile(ar,0))
print(np.percentile(ar,100))
print(np.percentile(ar,50))
[ 1  2  3  4  5  6  7  8  9 10]
1.0
10.0
5.5
print(ar1)
print("----")
print(np.sort(ar1)) #row sort
print("----")
print(np.sort(ar1,1)) #row sort
print("----")
print(np.sort(ar1,0)) #column sort
[[20  3]
 [40  5]
 [60  7]]
----
[[ 3 20]
 [ 5 40]
 [ 7 60]]
----
[[ 3 20]
 [ 5 40]
 [ 7 60]]
----
[[20  3]
 [40  5]
 [60  7]]
ls=[('rajeev',34),('aatish',38)]
empdt=np.dtype([('name','S20'),('age','i4')])
ar=np.array(ls, dtype=empdt)
ar
array([(b'rajeev', 34), (b'aatish', 38)],
      dtype=[('name', 'S20'), ('age', '<i4')])
print(np.sort(ar, order='name'))
print(np.sort(ar, order='age'))
[(b'aatish', 38) (b'rajeev', 34)]
[(b'rajeev', 34) (b'aatish', 38)]
ar=np.array([4,2,1,6,5])
ar
array([4, 2, 1, 6, 5])
np.argsort(ar) #indexes of sorted values
array([2, 1, 0, 4, 3], dtype=int64)
ar[np.argsort(ar)]
array([1, 2, 4, 5, 6])
ar
array([4, 2, 1, 6, 5])
np.argmax(ar) #for index of maximum value
3
ar[np.argmax(ar)]
6
#ar=np.array([3,8,0,7,5,0])
ar=np.array([[3,8,0],[7,5,0]])
ar
array([[3, 8, 0],
       [7, 5, 0]])
np.nonzero(ar)
(array([0, 0, 1, 1], dtype=int64), array([0, 1, 0, 1], dtype=int64))
ar[np.nonzero(ar)]
array([3, 8, 7, 5])
ar=np.array([3,8,0,7,5,0])
ar
array([3, 8, 0, 7, 5, 0])
np.where(ar>5)
array([0, 1, 0, 1, 0, 0])
ar[np.where(ar>5)]
array([8, 7])
ar=np.arange(1,11)
ar
array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10])
cd=np.mod(ar,2)==0
arx=np.extract(cd,ar)
cd=np.mod(ar,2)!=0
ary=np.extract(cd,ar)
arx
array([ 2,  4,  6,  8, 10])
ary
array([1, 3, 5, 7, 9])
np.save("d:/d/arrayfile.npy",arx)
print("file saved")
file saved
ar=np.load("d:/d/arrayfile.npy")
print(ar)
[ 2  4  6  8 10]
np.savetxt("d:/d/arrayfile.txt",arx)
print("file save")
file save
ar=np.loadtxt("d:/d/arrayfile.txt")
ar=np.asarray(ar, dtype=int)
print(ar)
[ 2  4  6  8 10]
ar=np.genfromtxt("d:/d/SalesRetails2.csv", delimiter=",", 
                 dtype=int)
ar
array([[  13,    4],
       [ 252,   90],
       [ 193,   54],
       [  35,    4],
       [  71,   11],
       [  56,   21],
       [  56,   21],
       [ 344,  165],
       [  97,   19],
       [ 341,   13],
       [  12,    3],
       [  20,    9],
       [ 210,   50],
       [  80,   37],
       [ 132,   35],
       [  12,    1],
       [  18,   -6],
       [ 308, -149],
       [  40,   -6],
       [   8,   -4],
       [ 273,   95],
       [  27,    5],
       [ 207,   66],
       [  60,  -20],
       [ 181,  -75],
       [ 326,   64],
       [  80,   34],
       [ 141,  -73],
       [  21,   -3],
       [ 114,  -49],
       [  19,    2],
       [ 152,  -99],
       [ 941, -601],
       [  10,    0],
       [ 300,  129],
       [ 138,   53],
       [  90,   31],
       [ 529,  264],
       [ 333,  106],
       [  42,    0],
       [  62,    8],
       [ 346,  155],
       [ 414,   45],
       [ 722,   50],
       [  56,    3],
       [ 168,   40],
       [ 125,    0],
       [ 153,   36],
       [  26,    7],
       [  44,    8],
       [  66,   28],
       [ 230,  -85],
       [ 172,   -3],
       [ 683,  -79],
       [  27,    4],
       [  21,    3],
       [ 200,  -13],
       [2124,  488],
       [  22,  -11],
       [ 391,  144],
       [  63,   20],
       [ 875,  139],
       [ 437, -248],
       [  68,   26],
       [  48,   17],
       [ 132,  -92],
       [  17,    5],
       [ 635,  266],
       [ 874,  411],
       [  75,   37],
       [ 928,  -81],
       [ 107, -121],
       [  28,   12],
       [  98,   20],
       [   8,    3],
       [ 135,   31],
       [  18,   -8],
       [ 158,   15],
       [ 121,   -2],
       [  22,    0],
       [ 323, -124],
       [ 137,  -22],
       [  39,  -19],
       [ 263,    5],
       [ 144,   36],
       [  36,   10],
       [  76,    9],
       [  39,   -1],
       [ 142,   32],
       [ 582,  218],
       [  41,   -1],
       [ 255,   91],
       [  58,   15],
       [  88,    8],
       [  17,    2],
       [ 575,  120],
       [  55,    1],
       [  96,    4],
       [  92,   -3],
       [  84,   -5],
       [ 494,  197],
       [  39,    5],
       [ 244,  -27],
       [  16,    2],
       [   5,    2],
       [ 266,    6],
       [  77,   -1],
       [  16,   -5],
       [  11,    0],
       [  48,   13],
       [ 465,   27],
       [  46,   10],
       [  66,  -16],
       [  65,    8],
       [ 409,   20],
       [  27,    1],
       [ 461,  101],
       [1052,   -1],
       [ 184,   33],
       [  33,    9],
       [ 101,  -52],
       [  73,   -1],
       [ 273,  -95],
       [ 105, -127],
       [ 145,   63],
       [ 191,   74],
       [ 199,   63],
       [ 191,   38],
       [ 107,   51],
       [ 185,    3],
       [  47,   22],
       [ 966,  -96],
       [  14,   -1],
       [   5,    0],
       [  13,    0],
       [ 373,   49],
       [   5,  -13],
       [  81,   -1],
       [ 464,  171],
       [ 347,  121],
       [  29,    1],
       [ 349,   65],
       [  23,    9],
       [  70,    7],
       [ 179,   40],
       [  17,   -2],
       [ 218, -127],
       [   6,   -2],
       [ 422, -178],
       [  57,    5],
       [ 195,    9],
       [  19,    7],
       [ 193,   79],
       [  80,  -11],
       [ 103,   26],
       [  58,    9],
       [ 105,   36],
       [  37,    3],
       [  13,    6],
       [ 168,    3],
       [ 152,   35],
       [ 255,   99],
       [ 210,   75],
       [ 362,  -60],
       [ 836,  230],
       [ 326,   16],
       [ 277,    2],
       [  30,    9],
       [  10,   -2],
       [ 731,  118],
       [ 650,   32],
       [  10,    4],
       [ 342,   61],
       [  46,    9],
       [  56,   15],
       [ 165,   19],
       [  12,    4],
       [ 119,    1],
       [ 494,  113],
       [1111,  200],
       [ 370,   55],
       [ 394,   90],
       [  14,    3],
       [  61,  -37],
       [ 141,   19],
       [  74,   17],
       [ 121,   15],
       [ 159,   70],
       [1480,  333],
       [ 982,  -12],
       [ 346,  100],
       [  19,    9],
       [  58,   15],
       [ 129,   42],
       [   5,   -2],
       [  89,    6],
       [   6,    0],
       [ 101,  -49],
       [  16,   -1],
       [  63,    1],
       [   9,    2],
       [  33,   -4],
       [ 256,   -1],
       [ 118,   56],
       [  80,    9],
       [ 107,  -64],
       [  30,    0],
       [  67,  -44],
       [  63, -146],
       [  24,    3],
       [   2,   -2],
       [   8,   -2],
       [ 198,  -23],
       [ 738, -166],
       [   8,    3],
       [  88,  -14],
       [ 276,  -10],
       [ 110,  -23],
       [ 538, -107],
       [1696, -148],
       [ 142,    7],
       [ 818,    8],
       [  17,    0],
       [ 723,   86],
       [ 123,   31],
       [ 519,  217],
       [ 688,   -1],
       [  86,   35],
       [ 398,  191],
       [  29,   13],
       [  63,   30],
       [1219,  198],
       [ 176,   26],
       [ 229,    8],
       [ 113,   40],
       [  50,    4],
       [ 549,  109],
       [2278,  751],
       [1098,  233],
       [  58,   25],
       [ 177,   54],
       [  51,   18],
       [ 360,  104],
       [  55,    1],
       [  22,    9],
       [  44,    3],
       [ 226,   97],
       [ 158,   20],
       [  41,    5],
       [  43,   12],
       [  63,    8],
       [ 249,  -33],
       [   9,    0],
       [   9,    0],
       [ 188,   41],
       [ 119,   31],
       [ 161,   30],
       [  51,   -1],
       [ 264,   13],
       [  51,   14],
       [ 110,   37],
       [ 118,   14],
       [ 123,   41],
       [ 246,  -37],
       [ 285,  -17],
       [  17,    0],
       [  77,   20],
       [ 607,  133],
       [  92,   45],
       [  26,    0],
       [   3,   -4],
       [  43,  -22],
       [  53,   14],
       [ 102,   -3],
       [  29,   -6],
       [ 551, -101],
       [ 105,    8],
       [ 126,   60],
       [  32,    6],
       [3408,  238],
       [  14,  -22],
       [  90,    3],
       [ 137,   35],
       [  31,  -41],
       [  64,    3],
       [ 318,  111],
       [ 333,   13],
       [1022,  332],
       [ 369, -591],
       [  15,    5],
       [ 161,   66],
       [ 161,    2],
       [1970,   49],
       [ 130,   31],
       [ 701,  300],
       [  18,    2],
       [  15,    2],
       [ 123,   33],
       [  99,   13],
       [ 413,  -89],
       [  23,   -7],
       [  18,   -5],
       [  98,   35],
       [  46,   18],
       [  69,   21],
       [  65,   15],
       [ 180,    7],
       [ 199,   89],
       [  96,   10],
       [ 116,   -1],
       [  32,   13],
       [ 267,   15],
       [  28,  -12],
       [  40,  -26],
       [  82,  -27],
       [  21,  -13],
       [1600,  368],
       [ 303,   42],
       [  53,   13],
       [  60,  -38],
       [  53,   -3],
       [  34,    7],
       [  37,    2],
       [  15,    3],
       [   5,    1],
       [  77,   34],
       [  31,   -6],
       [   8,    3],
       [ 128,    6],
       [  89,   31],
       [  30,   -9],
       [  76,   34],
       [  65,   23],
       [ 718,   99],
       [ 295,  133],
       [  65,  -21],
       [ 177,  -38],
       [ 238,  -24],
       [  14,    3],
       [ 225,   42],
       [ 259,   20],
       [  13,    2],
       [  75,   11],
       [ 231,   39],
       [1454,  -54],
       [  54,   10],
       [ 328,  147],
       [ 723, -277],
       [ 198,    9],
       [  21,   10]])
import matplotlib.pyplot as plt
plt.plot(arx, ary)
[<matplotlib.lines.Line2D at 0x1b2ab971240>]

ar=np.asarray([3,2,4,5,6,6,5])
ar
array([3, 2, 4, 5, 6, 6, 5])
np.append(ar,1)
array([3, 2, 4, 5, 6, 1])
np.insert(ar,1,99)
array([ 3, 99,  2,  4,  5,  6])
np.delete(ar,2)
array([3, 2, 5, 6])
print(ar)
np.unique(ar)
[3 2 4 5 6 6 5]
array([2, 3, 4, 5, 6])
ar=np.arange(1,7)
ar.shape=(3,2)
ar
array([[1, 2],
       [3, 4],
       [5, 6]])
np.append(ar, [[7,8]], axis=0)
array([[1, 2],
       [3, 4],
       [5, 6],
       [7, 8]])
np.append(ar, [[7],[8],[9]], axis=1)
array([[1, 2, 7],
       [3, 4, 8],
       [5, 6, 9]])
print(ar)
print(np.delete(ar,1, axis=0)) #row deletion
print(np.delete(ar,1, axis=1)) #column deletion
[[1 2]
 [3 4]
 [5 6]]
[[1 2]
 [5 6]]
[[1]
 [3]
 [5]]
ar=np.random.rand(400)*10
ar=np.asarray(ar,dtype=int)
ar.shape=(100,4)
ar
array([[5, 9, 5, 4],
       [0, 3, 4, 6],
       [6, 6, 0, 8],
       [5, 1, 4, 2],
       [6, 9, 6, 2],
       [1, 9, 3, 8],
       [7, 8, 2, 2],
       [7, 4, 2, 2],
       [8, 0, 0, 4],
       [1, 1, 4, 1],
       [4, 6, 6, 2],
       [8, 8, 6, 0],
       [5, 8, 2, 0],
       [7, 9, 3, 8],
       [4, 1, 7, 6],
       [2, 4, 7, 7],
       [9, 4, 2, 8],
       [4, 7, 8, 1],
       [4, 0, 3, 5],
       [2, 8, 9, 2],
       [3, 6, 9, 3],
       [1, 6, 8, 8],
       [8, 3, 8, 5],
       [8, 1, 3, 2],
       [5, 0, 7, 2],
       [4, 6, 9, 2],
       [8, 8, 4, 4],
       [1, 3, 5, 1],
       [9, 7, 1, 7],
       [7, 9, 6, 2],
       [0, 0, 2, 6],
       [7, 5, 8, 9],
       [6, 7, 8, 1],
       [2, 4, 8, 9],
       [0, 9, 9, 0],
       [0, 9, 4, 8],
       [9, 9, 9, 8],
       [0, 3, 1, 1],
       [0, 9, 1, 2],
       [7, 7, 3, 8],
       [1, 7, 7, 2],
       [2, 4, 5, 3],
       [9, 3, 8, 0],
       [0, 9, 8, 2],
       [2, 8, 8, 7],
       [0, 1, 9, 9],
       [9, 4, 2, 6],
       [9, 8, 3, 9],
       [0, 7, 8, 8],
       [9, 8, 9, 3],
       [1, 1, 8, 7],
       [5, 3, 8, 0],
       [3, 1, 7, 7],
       [6, 9, 1, 9],
       [7, 6, 2, 1],
       [4, 4, 3, 5],
       [0, 1, 3, 8],
       [9, 1, 7, 5],
       [1, 7, 7, 9],
       [5, 0, 3, 8],
       [1, 2, 1, 9],
       [6, 1, 7, 5],
       [0, 4, 3, 6],
       [2, 1, 4, 6],
       [6, 9, 5, 8],
       [3, 9, 3, 0],
       [0, 8, 0, 1],
       [6, 8, 4, 3],
       [0, 6, 1, 0],
       [8, 6, 8, 6],
       [9, 2, 9, 0],
       [5, 0, 3, 4],
       [0, 8, 3, 0],
       [8, 5, 8, 1],
       [6, 2, 1, 4],
       [9, 6, 4, 0],
       [0, 7, 2, 8],
       [9, 9, 0, 8],
       [1, 3, 6, 4],
       [3, 7, 3, 5],
       [8, 3, 1, 2],
       [5, 1, 2, 5],
       [6, 5, 8, 1],
       [4, 8, 3, 4],
       [0, 0, 7, 0],
       [7, 7, 0, 4],
       [0, 5, 4, 3],
       [5, 6, 9, 0],
       [1, 9, 4, 6],
       [7, 7, 5, 3],
       [6, 6, 2, 1],
       [9, 1, 0, 5],
       [2, 1, 1, 5],
       [5, 6, 9, 5],
       [6, 5, 9, 2],
       [9, 6, 7, 0],
       [6, 2, 5, 8],
       [2, 3, 7, 9],
       [5, 4, 6, 7],
       [8, 0, 6, 7]])
#400 emp, 4 shift , 100emp, 400 enteries
#shift wise Mean, Max, Min, STD
print(np.mean(ar, 0))
print(np.max(ar, 0))
print(np.min(ar, 0))
print(np.std(ar, 0))
[4.45 4.96 4.82 4.29]
[9 9 9 9]
[0 0 0 0]
[3.14125771 3.01635542 2.8508946  3.00098317]
arcrt=np.where(ar>5,1,0)
arcrt.shape
print(np.sum(arcrt,0))
[43 51 44 38]
plt.plot(['SF-1','SF-2','SF-3','SF-4'],np.sum(arcrt,0) )
[<matplotlib.lines.Line2D at 0x1b2ac009748>]

ar1=arcrt.reshape(4,25,4)
ar1.shape
(4, 25, 4)
lg=['SF-1','SF-2','SF-3','SF-4']
lvmax=[]
for a in range(len(ar1)):
    #print("Group No :",a)
    #print(ar1[a])    
    print(np.sum(ar1[a],0))
    plt.plot(lg,np.sum(ar1[a],0), label="Group :"+str(a) )
    lvmax.append(np.sum(ar1[a],0))
    
    
arv=np.asarray(lvmax)
shiftmax=np.max(arv,0)
for a in range(len(lg)):
    plt.annotate(xy=[lg[a], shiftmax[a]], s="H ->"+str(shiftmax[a]))
plt.legend()
plt.show()
[10 13 11  8]
[11 16 14 12]
[10 10  9 11]
[12 12 10  7]
